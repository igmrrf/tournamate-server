// <auto-generated />
using System;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250523174900_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("InvitationCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("InvitationStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AwayId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("HomeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MatchFoulsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("MatchScoreId")
                        .HasColumnType("char(36)");

                    b.Property<int>("MatchStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("MatchSubstitutionsId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamPerformanceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TournamentRoundId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MatchFoulsId");

                    b.HasIndex("MatchScoreId");

                    b.HasIndex("MatchSubstitutionsId");

                    b.HasIndex("TeamPerformanceId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TournamentRoundId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("CanMakeSubstitutions")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanRecordFoul")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanUpdateScore")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanUpdateTimeStamp")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TournamentRoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TournamentRoleId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsAssinged")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JerseyNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NoOfPlayer")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TOurnmaentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TournamentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Logo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NoOfPlayer")
                        .HasColumnType("int");

                    b.Property<int>("NoOfSubPlayer")
                        .HasColumnType("int");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TournamentRoundId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TournamentRoundId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.TeamPerformance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<int>("Diff")
                        .HasColumnType("int");

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TotalPoint")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Performance");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.TournamentRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.TournamentRound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("TournamentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Round");
                });

            modelBuilder.Entity("Domain.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<int>("CurrentPlayerCount")
                        .HasColumnType("int");

                    b.Property<int>("CurrentTeamCount")
                        .HasColumnType("int");

                    b.Property<string>("InvitationCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<int>("NoOfPlayers")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfSubPlayers")
                        .HasColumnType("int");

                    b.Property<int>("NoOfTeams")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TournamentInfoId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TournamentMode")
                        .HasColumnType("int");

                    b.Property<int>("TournamentType")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TournamentInfoId");

                    b.ToTable("Tournament");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHashSalt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("VerificationTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Domain.ValueObject.MatchFoul", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("char(36)");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Fouls");
                });

            modelBuilder.Entity("Domain.ValueObject.MatchScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AwayTeamScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<int>("HomeTeamScore")
                        .HasColumnType("int");

                    b.Property<bool>("IsPernaltyShootout")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ScorerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ScorerTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Domain.ValueObject.MatchSubstitution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlayerInId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlayerOutId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Subtitues");
                });

            modelBuilder.Entity("Domain.ValueObject.MatchTimeStamp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasMatchEnded")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasMatchbegan")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("WhoWon")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("MatchTime");
                });

            modelBuilder.Entity("Domain.ValueObject.TournamentInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("CheckInDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DurationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SportName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TounamentThumbnail")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TournamentInfos");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.Invitation", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("Invitations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.Match", b =>
                {
                    b.HasOne("Domain.ValueObject.MatchFoul", "MatchFouls")
                        .WithMany()
                        .HasForeignKey("MatchFoulsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ValueObject.MatchScore", "MatchScore")
                        .WithMany()
                        .HasForeignKey("MatchScoreId");

                    b.HasOne("Domain.ValueObject.MatchSubstitution", "MatchSubstitutions")
                        .WithMany()
                        .HasForeignKey("MatchSubstitutionsId");

                    b.HasOne("Domain.Aggregate.TournamentAggregate.TeamPerformance", "TeamPerformance")
                        .WithMany()
                        .HasForeignKey("TeamPerformanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tournament", null)
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregate.TournamentAggregate.TournamentRound", null)
                        .WithMany("Matches")
                        .HasForeignKey("TournamentRoundId");

                    b.Navigation("MatchFouls");

                    b.Navigation("MatchScore");

                    b.Navigation("MatchSubstitutions");

                    b.Navigation("TeamPerformance");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.Permission", b =>
                {
                    b.HasOne("Domain.Entities.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregate.TournamentAggregate.TournamentRole", null)
                        .WithMany("Permissions")
                        .HasForeignKey("TournamentRoleId");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.Player", b =>
                {
                    b.HasOne("Domain.Aggregate.TournamentAggregate.Team", null)
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tournament", null)
                        .WithMany("Players")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.Team", b =>
                {
                    b.HasOne("Domain.Entities.Tournament", null)
                        .WithMany("Teams")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregate.TournamentAggregate.TournamentRound", null)
                        .WithMany("Byes")
                        .HasForeignKey("TournamentRoundId");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.TournamentRole", b =>
                {
                    b.HasOne("Domain.Entities.Tournament", "Tournament")
                        .WithMany("Participants")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("Role")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.TournamentRound", b =>
                {
                    b.HasOne("Domain.Entities.Tournament", null)
                        .WithMany("Rounds")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("Domain.Entities.Tournament", b =>
                {
                    b.HasOne("Domain.ValueObject.TournamentInfo", "TournamentInfo")
                        .WithMany()
                        .HasForeignKey("TournamentInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TournamentInfo");
                });

            modelBuilder.Entity("Domain.ValueObject.MatchTimeStamp", b =>
                {
                    b.HasOne("Domain.Aggregate.TournamentAggregate.Match", null)
                        .WithOne("MatchTimeStamp")
                        .HasForeignKey("Domain.ValueObject.MatchTimeStamp", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.Match", b =>
                {
                    b.Navigation("MatchTimeStamp");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.Team", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.TournamentRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Domain.Aggregate.TournamentAggregate.TournamentRound", b =>
                {
                    b.Navigation("Byes");

                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Domain.Entities.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Participants");

                    b.Navigation("Players");

                    b.Navigation("Rounds");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
